using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Cube_obselete : MonoBehaviour
{
    [Header("General Settings")]

    public bool isEnemy = false;
    public bool isEnemyMirror = false;
    public bool isEnemyMoving = false;
    public bool isCleaningBox = false;
    public bool isDashBox = false;
    public bool isWall = false;

    public bool isPushBlock = false;

    public bool isTnt = false;
    public bool isTrigger = false;

    public bool isTeleport = false;
    public GameObject teleportDestination = null;

    [SerializeField] private float tntDelay = 1f;

    [SerializeField] private Cube_obselete associatedTnt = null;



    public enum dashEnum
    {
        forward,
        backward,
        right,
        left,
    };

    
    [Header("Enemy Settings")]

    public Color enemyColor;

    [SerializeField] public bool InvertXAxis = false;
    [SerializeField] public bool InvertZAxis = false;

    private Vector3 initPos;
    private Quaternion initRot;





    

    private float elapsedTime = 0;

    private Action DoAction;

    [Header("Movement Settings")]

    public List<dashEnum> MoveList = new List<dashEnum>();
    private int CurrentMove = 0;
    private bool revertMove = false;

    

    
    public Rewired.Player replayer;
    
    

    

    private Quaternion zeroRot = new Quaternion(0, 0, 0, 0);

    
    
    public float speed = 5;

    

    private void SetModeVoid()
    {
        DoAction = DoActionVoid;
    }

    private void DoActionVoid()
    {

    }

    private void Start()
    {
        GameManager.instance.AddCube(this);

        if (!isEnemy && !isEnemyMirror)
        {
            if (stain != null)
            {
                stainScale = stain.transform.localScale;
                stainColor = stain.GetComponent<Renderer>().material.color;
            }
        }

        if (isEnemyMirror || isEnemyMoving) Player_obselete.OnMove += SetModeMove;

        if (isBreakable)
        {
            cubesPivotDistance = cubeSize * cubesInRow / 2;
            cubesPivot = Vector3.one * cubesPivotDistance;
        }



        SetModeVoid();
    }

    public void ResetCube()
    {
        transform.position = initPos;
        transform.rotation = initRot;
        colorPotencial = initColorPotential;
        color = initColor;

        CurrentMove = 0;

        SetModeVoid();
    }

    #region CubeType

    /*
    NoCube,
    Base,
    EnnemiStatique,
    EnnemiPattern,
    EnnemiMiroir,
    Peinture,
    Cleaner,
    ArcEnCiel,
    Teleporter,
    Dash,
    Glissant,
    Mur,
    TNT,
    Interrupteur,
    Destructible,
    BlocMouvant,
    */

    public void SetCubeBase()
    {
        isEnemy = false;
        isEnemyMirror = false;
        isCleaningBox = false;
        isDashBox = false;
        isWall = false;
        isTnt = false;
        isTrigger = false;
    }

    public void SetCubeBase(Material colorMat)
    {
        isEnemy = false;
        isEnemyMirror = false;
        isCleaningBox = false;
        isDashBox = false;
        isWall = false;
        isTnt = false;
        isTrigger = false;

        gameObject.GetComponent<Renderer>().sharedMaterial = colorMat;
    }

    public void SetCubeColor(Material colorMat)
    {
        isEnemy = false;
        isEnemyMirror = false;
        isCleaningBox = false;
        isDashBox = false;
        isWall = false;
        isTnt = false;
        isTrigger = false;

        colorPotencial = 10;
        gameObject.GetComponent<Renderer>().sharedMaterial = colorMat;
    }

    public void SetEnemy(Material mat)
    {
        isEnemy = true;
        isEnemyMirror = false;
        isCleaningBox = false;
        isDashBox = false;
        isWall = false;
        isTnt = false;
        isTrigger = false;

        gameObject.GetComponent<Renderer>().sharedMaterial = mat;
    }

    public void SetTeleporter(Material mat)
    {
        isEnemy = false;
        isEnemyMirror = false;
        isCleaningBox = false;
        isDashBox = false;
        isWall = false;
        isTnt = false;
        isTrigger = false;
        isTeleport = true;
        gameObject.GetComponent<Renderer>().sharedMaterial = mat;
    }

    public void SetEnemyMoving(Material mat)
    {
        isEnemy = true;
        isEnemyMirror = true;
        isCleaningBox = false;
        isDashBox = false;
        isWall = false;
        isTnt = false;
        isTrigger = false;

        gameObject.GetComponent<Renderer>().sharedMaterial = mat;
    }

    public void SetCleaningBox(Material mat)
    {
        isEnemy = false;
        isEnemyMirror = false;
        isCleaningBox = true;
        isDashBox = false;
        isWall = false;
        isTnt = false;
        isTrigger = false;

        gameObject.GetComponent<Renderer>().sharedMaterial = mat;
    }
    public void SetDashBox(Material mat)
    {
        isEnemy = false;
        isEnemyMirror = false;
        isCleaningBox = false;
        isDashBox = true;
        isWall = false;
        isTnt = false;
        isTrigger = false;

        gameObject.GetComponent<Renderer>().sharedMaterial = mat;
    }

    public void SetWall(Material mat)
    {
        isEnemy = false;
        isEnemyMirror = false;
        isCleaningBox = false;
        isDashBox = false;
        isWall = true;
        isTnt = false;
        isTrigger = false;

        gameObject.GetComponent<Renderer>().sharedMaterial = mat;
    }

    public void SetTNT(Material mat)
    {
        isEnemy = false;
        isEnemyMirror = false;
        isCleaningBox = false;
        isDashBox = false;
        isWall = false;
        isTnt = true;
        isTrigger = false;

        gameObject.GetComponent<Renderer>().sharedMaterial = mat;
    }

    public void SetTrigger(Material mat)
    {
        isEnemy = false;
        isEnemyMirror = false;
        isCleaningBox = false;
        isDashBox = false;
        isWall = false;
        isTnt = false;
        isTrigger = true;

        gameObject.GetComponent<Renderer>().sharedMaterial = mat;
    }

    #endregion

    #region Effects


    #endregion

    float cubesPivotDistance;
    Vector3 cubesPivot;

    

    public Color GetColor()
    {
        if (colorPotencial > 0)
        {
            AudioManager.instance.Play("AddPaint");
            colorPotencial--;
            //takeColor.gameObject.SetActive(true);
            return color;
        }
        return Color.white;
    }

    private void CreatePiece(int x, int y, int z)
    {
        // create piece
        GameObject piece;
        piece = GameObject.CreatePrimitive(PrimitiveType.Cube);

        // set scale and position
        piece.transform.position = transform.position + new Vector3(cubeSize * x, cubeSize * y, cubeSize * z) - cubesPivot;
        piece.transform.localScale = Vector3.one * cubeSize;

        // add rigidbody and mass
        Rigidbody rb = piece.AddComponent<Rigidbody>();
        rb.mass = cubeSize;

        Destroy(piece, 1.5f);
    }

    #endregion 

    private void Update()
    {
        DoAction();
    }

    private void SetModeMove(Vector3 vector)
    {
        if (DoAction == DoActionFall) return;

        if (isEnemyMirror)
        {
            if (InvertZAxis)
            {
                if (vector == Vector3.forward || vector == Vector3.back)
                {
                    vector *= -1;
                    orientation = vector;
                }
            }
            else
            {
                orientation = vector;
            }

            if (InvertXAxis)
            {
                if (vector == Vector3.right || vector == Vector3.left)
                {
                    vector *= -1;
                    orientation = vector;
                }
            }
            else
            {
                orientation = vector;
            }

            if (TestWall())
            {
                SetModeVoid();
                return;
            }
        }
        else if (isEnemyMoving)
        {
            if (CurrentMove == MoveList.Count && !revertMove)
            {
                if (transform.position == initPos)
                {
                    CurrentMove = 0;
                }
                else revertMove = true;
            }
            else if (CurrentMove == 0 && revertMove) revertMove = false;

            if (revertMove) CurrentMove--;

            if ((int)MoveList[CurrentMove] == 0)
            {
                orientation = Vector3.forward;
                if (revertMove) orientation = Vector3.back;
            }
            else if ((int)MoveList[CurrentMove] == 1)
            {
                orientation = Vector3.back;
                if (revertMove) orientation = Vector3.forward;
            }
            else if ((int)MoveList[CurrentMove] == 2)
            {
                orientation = Vector3.right;
                if (revertMove) orientation = Vector3.left;
            }
            else
            {
                orientation = Vector3.left;
                if (revertMove) orientation = Vector3.right;
            }

            if (!revertMove) CurrentMove++;

        }

        RotationCheck();

        _elapsedTime = 0;

        direction = transform.position + orientation;
        previousRot = transform.rotation;
        addedRotation = previousRot * Quaternion.AngleAxis(90f, axis);
        previousPos = transform.position;

        // init move

        DoAction = DoActionMove;
    }

    private void DoActionMove()
    {
        _elapsedTime += Time.deltaTime;

        float ratio = _elapsedTime / _moveTime;

        transform.position = Vector3.Lerp(previousPos, direction, ratio);

        transform.rotation = Quaternion.Lerp(previousRot, addedRotation, ratio);

        transform.position = new Vector3(transform.position.x, previousPos.y + Mathf.Clamp(Mathf.Sin(ratio * Mathf.PI) * offset, 0, 1), transform.position.z);

        if (_elapsedTime >= _moveTime)
        {
            // end move
            SetModeVoid();

            transform.eulerAngles = Vector3.zero;

            TestTile();
        }
    }

    

    private void DoActionFall()
    {
        transform.position += Vector3.down * Time.deltaTime * GameManager.instance.fallSpeed;

        if (transform.position.y < initPos.y - 1)
        {
            if (isEnemy || isEnemyMirror)
            {
                Explode();
            }

            SetModeVoid();
        }
    }

    

    #region Dash

    
    #endregion

    #region Push

    public void SetModePush(Vector3 vector)
    {
        if (DoAction == DoActionFall) return;

        RotationCheck();

        _elapsedTime = 0;

        direction = transform.position + orientation;
        previousPos = transform.position;

        // init move

        DoAction = DoActionPush;
    }

    private void DoActionPush()
    {
        _elapsedTime += Time.deltaTime;

        float ratio = _elapsedTime / _moveTime;

        transform.position = Vector3.Lerp(previousPos, direction, ratio);

        if (_elapsedTime >= _moveTime)
        {
            // end move
            SetModeVoid();

            transform.eulerAngles = Vector3.zero;

            TestTile();
        }
    }

    #endregion

    
    
}
